---

- name: Get squareup items
  uri:
    url: "https://connect.squareup.com/v2/catalog/list"
    method: GET
    headers: "{{ square_curl_headers }}"
  register: catalog_list_result
  tags: upsert

- name: Set squareup_item_names
  set_fact:
    squareup_item_names: "{{ squareup_item_names + [item.item_data.name] }}"
  with_items: "{{ catalog_list_result.json.objects }}"
  when: "{{ item.type == 'ITEM' }}"
  no_log: true
  tags: upsert

- name: Set item_names
  set_fact:
    item_names: "{{ item_names + [item.name] }}"
  with_items: "{{ items }}"
  no_log: true
  tags: upsert

- name: Post catalog_batch_upsert
  uri:
    url: "https://connect.squareup.com/v2/catalog/batch-upsert"
    method: POST
    body: "{{ lookup('template','catalog_batch_upsert.json.j2') }}"
    body_format: json
    headers: "{{ square_curl_headers }}"
  when: "{{ (item_names | difference(squareup_item_names)) | length }}"
  tags: upsert

- name: Git checkout
  ansible.builtin.git:
    repo: "{{ repo }}"
    dest: "{{ repo_dir }}"
    version: main
    force: yes
  tags: checkout

- name: Empty items dir
  file:
    path: "{{ items_full_dir }}"
    state: "absent"

- name: Side load image assets
  copy:
    src: "items"
    dest: "{{ images_full_dir }}"
    force: no

- name: Side load image metadata
  template:
    src: "products.service.ts.j2"
    dest: "{{ app_dir }}products.service.ts"

- name: Ensure image processing script exists
  template:
    src: "image_processing.sh.j2"
    dest: "{{ items_full_dir }}image_processing.sh"
    mode: a+x

- name: Process images
  shell: "cd {{ items_full_dir }} && ./image_processing.sh"

- name: Install angular dependencies
  shell: "cd {{ repo_dir }} && npm install --force"

- name: Build production artifacts
  shell: "cd {{ repo_dir }} && ng build --prod"

- name: Compress production artifacts
  archive:
    path: "{{ artifact_build_dir }}"
    dest: "{{ comp_production_artifact }}"
    format: zip

- name: Deploy production artifacts (you'll have to accept the fingerprint manually on the first run)
  shell: 'rsync -az -e "ssh -i {{ ssh_private_key_file }}" {{ comp_production_artifact }} {{ ansible_user }}@{{ hostvars["ecommerce"].ansible_host }}:{{ comp_production_artifact }}'
  become: no
  tags: deploy

- name: Unpack production artifacts
  unarchive:
    src: "{{ comp_production_artifact }}"
    dest: "{{ web_dir }}"
    remote_src: yes
  delegate_to: ecommerce
  notify: restart nginx
  tags: deploy
